      HOW TO ADD BZIP2 SUPPORT TO ZIP

This document describes how to add bzip2 support to Zip.

As in previous Zip versions, the default compression method
is deflation.  Adding bzip2 support lets the user specify the bzip2
compression method instead, which often gives a better compression
ratio (perhaps at the cost of greater CPU time).  The compression method
is specified using the "-Z method" command-line option, where "method"
may be either "deflate" (the default), or "bzip2" (if Zip is built with
bzip2 support).

Note that a modern UnZip program, also built with optional bzip2
support, is needed to read entries in a zip archive compressed with
bzip2 (compression method 12).

The Zip source kit does not include the bzip2 source files which are
needed to provide bzip2 compression.  A suitable bzip2 object library or
source kit must be supplied by the user to build Zip with bzip2 support. 
A bzip2 source kit should be available at "http://www.bzip.org/". 
Instructions for adding bzip2 support when building Zip on various
operating systems are given below.

Zip built with bzip2 support provides a different compression method for
use in a Zip archive.  It does not replace the bzip2 program itself. 
The bzip2 code and algorithms are provided under the bzip2 license
(provided in the bzip2 source kit) and what is not covered by that
license is covered under the Info-ZIP license.  Inquiries involving the
use of bzip2 compression in Zip should be directed to Info-ZIP, not to
the bzip2 maintainer.  Inquiries involving only bzip2 code and
algorithms should probably be directed to the bzip2 maintainer.


      Installation

For building with bzip2 support, Zip needs one bzip2 header file,
"bzlib.h", and the object library, typically "libbz2.a".  Ideally, the
bzip2 object library should be built with the C macro BZ_NO_STDIO
defined, which is _not_ the default.  With BZ_NO_STDIO defined, the
resulting bzip2 object library will be smaller, and will provide better
error handling within an application like Zip.  However, a standard
bzip2 object library may be used, if desired.


   Using an existing bzip2 library:

If the required header file and object library are already available on
your system, they may be used, but if you're building Zip from its
sources, it may be best (and easiest) to build the bzip2 object library
(with BZ_NO_STDIO defined) at the same time.


   Building the bzip2 library from bzip2 source (recommended):

Download the latest bzip2 package (from "http://www.bzip.org/", for
example).
     
Unpack the bzip2 source kit (bzip2-1.0.4.tar.gz for example).

Read the README file in the bzip2 source kit.

Compile the bzip2 library for your OS, preferably defining BZ_NO_STDIO. 
Note: On UNIX systems, this may be done automatically by the Zip
builders, as explained below.


   Installation on UNIX (see below for installation on other systems):

Zip on UNIX uses the "bzlib.h" include file and the compiled "libbz2.a"
library to static link to bzip2.  Currently we do not support using the
shared library (patches welcome).

When Zip is built using the "generic" target (that is, using a command
like "make -f unix/Makefile generic"), the Zip builders
("unix/configure" and "unix/Makefile") will look for the bzip2 files in
the "bzip2" directory in the Zip distribution.  If the object library is
found there, it will be used.  If only the bzip2 source files are found
there, the Zip builders will try to build the object library (defining
BZ_NO_STDIO, of course).

To make this work, the bzip2 source kit must be unpacked directly into
the Zip "bzip2" directory.  For example:

      # Unpack the Zip source kit.
      gzip -cd zip30.tar-gz | tar xfo -
      # Move down to the Zip kit's "bzip2" directory, ...
      cd zip30/bzip2
      # ... and unpack the bzip2 source kit there.
      gzip -cd ../../bzip2-1.0.4.tar.gz | tar xfo -
      # Move the bzip2 source files up to the Zip kit's bzip2 directory.
      cd bzip2-1.0.4
      mv * ..
      # Return to the Zip source kit directory, ready to build.
      cd ../..
      # Build Zip.
      make -f unix/Makefile generic


If the required files are not found in the Zip "bzip2" directory, the
Zip builders will try to use whatever bzip2 files it can find in the
default include and library paths on the system.  (This can work if
bzip2 files are installed in, say, "/usr/include" and "/usr/lib".)

To override the automatic bzip2 detection scheme, and use an existing
bzip2 object library (and header file), define the "make" macro IZ_BZIP2
to specify the directory where these files may be found.  For example:

      make -f unix/Makefile generic \
       IZ_BZIP2=/usr/local/src/bzip2/bzip2-1.0.4

The Zip builders will then expect to find the required files there.  To
avoid causing problems for other users. they will _not_ attempt to
_build_ a bzip2 object library in the IZ_BZIP2 directory.


To build Zip with _no_ bzip2 support on a system where the automatic
bzip2 detection scheme will find the bzip2 files, simply specify a bad
IZ_BZIP2 directory.  For example:

      make -f unix/Makefile generic IZ_BZIP2=no_such_directory


When the Zip build is complete, verify that bzip2 support has been
enabled by checking the feature list:

      ./zip -v

If all went well, bzip2 (and its library version) should be listed.


Installation on other systems


  MSDOS:

	Nothing yet.


  WIN32 (Windows NT/2K/XP/2K3/... and Windows 95/98/ME):

    For Windows there seems to be two approaches, either use bzip2
    as a dynamic link library or compile the bzip2 source in directly.
    I have not gotten the static library libbz2.lib to work, but that
    may be me.

    Using bzip2 as a dynamic link library:

      If you have the needed bzlib.h, libbz2.lib, and libbz2.dll files
      you can skip building bzip2.  If not, open the libbz2.dsp project
      and build libbz2.dll

      This creates
        debug/libbz2.lib
      and
        libbz2.dll

      Building Zip

      Copy libbz2.lib to the bzip2 directory in the Zip source tree.  This
      is needed to compile Zip with bzip2 support.  Also copy the matching
      bzlib.h from the bzip2 source to the same directory.

	Add libbz2.lib to the link list for whatever you are building.  Also
      define the compiler define BZIP2_SUPPORT.

      Build Zip.

      Put libbz2.dll in your command path.  This is needed to run Zip with
      bzip2 support.

      Verify that bzip2 is enabled with the command

          zip -v

      You should see bzip2 listed.

    Compiling in bzip2 from the bzip2 source:

      This approach compiles in the bzip2 code directly.

      Get a copy of the bzip2 source and copy the contents to the bzip2
      directory in the Zip source tree so that bzlib.h is directly in
      the bzip2 directory.

      Use the vc6bz2 projects to build Zip.  These projects know of the
      added bzip2 files.

      Verify that bzip2 is enabled with the command

          zip -v


  Windows DLL (WIN32):

	Nothing yet.


  Mac OS X:

    Follow the standard UNIX build procedure.  Mac OS X includes bzip2
    (although perhaps not the current version), and the UNIX builders
    should find the bzip2 files in the standard places, but the user may
    instead supply a bzip2 kit as on other UNIX systems.


  OS/2:

	Nothing yet.


  VMS (OpenVMS):

    See [.vms]Install_vms.txt for how to enable bzip2 support on VMS.


Last updated March 14 2007, E. Gordon
